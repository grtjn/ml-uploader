!function(){"use strict";angular.module("ml.uploader",["ml.common","ui.bootstrap"])}(),function(){"use strict";function MLUploadService($rootScope,mlRest,$http){function applyUpdate(){$rootScope.$$phase||$rootScope.$apply()}var service={},Progress={};return Progress.value=0,Progress.done=!1,Progress.name="unkown",Progress.failed=!1,Progress.update=function(val){this.updated=Date.now(),console.log("update progress",this),val&&(this.value=val,this.done=100===val),applyUpdate(this)},Progress.error=function(code){console.log("setting error",code),this.failed=!0,this.errorStatus=code,applyUpdate(this)},service.sendFile=function(data,opts){var progress=Object.create(Progress),format="binary";return progress.name=data.name,console.log("sending file"),/text/.test(data.type)?format="text":/xml/.test(data.type)?format="xml":/json/.test(data.type)&&(format="json"),mlRest.updateDocument(data,angular.extend({uri:data.name,format:format},opts)).then(function(response){console.log("added document to grade"),progress.done=!0,progress.update(100)}),progress},service}angular.module("ml.uploader").factory("mlUploadService",MLUploadService),MLUploadService.$inject=["$rootScope","MLRest","$http"]}(),function(){"use strict";function isSupported(){return window.File&&window.FileList&&window.FileReader}function MLUploadDirective(mlUploadService){return{restrict:"E",replace:!0,transclude:!0,scope:{multiple:"@",collection:"@mlCollection",fileList:"=uploadFileList",transform:"=mlTransform"},link:function(scope,ele,attr,transclude){function dzHighlight(e){e.stopPropagation(),e.preventDefault(),"dragenter"===e.type||"dragover"===e.type?dropzone.addClass("hover"):dropzone.removeClass("hover")}function dropFiles(e){e.preventDefault(),e.stopPropagation(),console.log("drop files",e),e=e.originalEvent;var files=e.target.files||e.dataTransfer.files,i=files.length;for(dzHighlight(e);i--;)processFile(files[i]);scope.$apply()}function processFile(f){console.log("processing file",f);var ext=f.name.substr(f.name.lastIndexOf(".")+1),progress=mlUploadService.sendFile(f,{uri:f.name.replace(/ /g,""),category:"content",collection:scope.collection,transform:scope.transform});progress.ext=ext,scope.files.push(progress)}if(scope.files=scope.fileList||[],!isSupported())throw"ml-uloader - HTML5 file upload not supported by this browser";scope.multiple=scope.multiple&&"true"===scope.multiple,ele=angular.element(ele),ele.append('<div style="width:0;height:0;overflow:hidden"><input type="file" name="_hidden_uploader_file" '+(scope.multiple?"multiple":"")+"></div>");var fileInp=ele.find('input[type="file"]'),dropzone=ele.find(".ml-dropzone");dropzone.on("click",function(evt){console.log("dz click"),fileInp.click(),evt.stopPropagation()}).on("drop",dropFiles).on("dragenter dragleave dragover",dzHighlight),fileInp.on("change",dropFiles),jQuery("html").on("drop",function(e){return e.preventDefault(),console.log("document drop",e),!1})},template:'<div class="ml-upload"><div class="ml-dropzone"><div class="notes" ng-transclude ng-hide="files.length"></div><ul class="ml-upload-file-list list-unstyled" ng-show="files.length"><li ng-repeat="f in files" class="ml-upload-file" ng-attr-file-extension="{{f.ext}}" ng-class="{ \'ml-upload-done\': f.done, \'ml-upload-error\': f.failed }" ng-attr-title="{{f.errorStatus || f.name}}"><span class="ml-upload-file-name">{{ f.name }}</span><span class="ml-upload-file-progress"><span class="ml-upload-progress-value">{{ f.value }}%</span><span class="ml-upload-progress-bar" ng-style="{ width: f.value + \'%\' }">&nbsp;</span></span></li></ul></div></div>'}}MLUploadDirective.$injector=["mlUploadService"],angular.module("ml.uploader").directive("mlUpload",MLUploadDirective)}();